//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use chrono::{Local, NaiveDateTime};
use nanoid::nanoid;
use sea_orm::entity::prelude::*;
use sea_orm::ActiveValue::Set;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "chapter")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: Option<String>,
    pub content: Option<String>,
    pub volume_id: Option<String>,
    pub volume_name: Option<String>,
    pub create_time: Option<NaiveDateTime>,
    pub modified_time: Option<NaiveDateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {
    fn new() -> Self {
        Self {
            id: Set(nanoid!(10)),
            ..ActiveModelTrait::default()
        }
    }
    fn before_save(mut self, insert: bool) -> Result<Self, DbErr> {
        if insert {
            self.create_time = Set(Some(Local::now().naive_local()));
            Ok(self)
        } else {
            self.modified_time = Set(Some(Local::now().naive_local()));
            Ok(self)
        }
    }
}
